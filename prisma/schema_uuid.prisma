generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  name                    String?
  passwordHash            String
  isAdmin                 Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  comments                Comment[]
  commentReactions        CommentReaction[]
  triggeredNotifications  Notification[]           @relation("NotificationActor")
  notifications           Notification[]           @relation("UserNotifications")
  notificationPreferences NotificationPreference[]
  posts                   Post[]
  reactions               Reaction[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  ingredients String
  steps       String
  notes       String?
  images      String
  tags        String?
  category    String?
  cookingTime Int?
  difficulty  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPublic    Boolean    @default(false)
  cookedOn    DateTime?
  userId      String
  comments    Comment[]
  user        User       @relation(fields: [userId], references: [id])
  reactions   Reaction[]

  @@index([userId])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  postId    Int
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        Int               @id @default(autoincrement())
  content   String
  postId    Int
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions CommentReaction[]

  @@index([postId])
  @@index([userId])
}

model CommentReaction {
  id        Int      @id @default(autoincrement())
  type      String
  commentId Int
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  userId    String
  actorId   String
  targetId  Int
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  actor     User     @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
}

model NotificationPreference {
  id      Int     @id @default(autoincrement())
  type    String
  enabled Boolean @default(true)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([userId])
}
