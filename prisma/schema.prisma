generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String?
  passwordHash     String
  isAdmin          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  comments         Comment[]
  commentReactions CommentReaction[]
  posts            Post[]
  reactions        Reaction[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  ingredients String
  steps       String
  notes       String?
  images      String
  tags        String?
  category    String?
  cookingTime Int?
  difficulty  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPublic    Boolean    @default(false)
  cookedOn    DateTime?
  userId      Int
  comments    Comment[]
  user        User       @relation(fields: [userId], references: [id])
  reactions   Reaction[]

  @@index([userId])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        Int               @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions CommentReaction[]

  @@index([postId])
  @@index([userId])
}

model CommentReaction {
  id        Int      @id @default(autoincrement())
  type      String
  commentId Int
  userId    Int
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
}
